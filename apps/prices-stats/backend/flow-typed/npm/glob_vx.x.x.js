// flow-typed signature: e1ea048e8eaf02a6bf364d9c5475c21c
// flow-typed version: <<STUB>>/glob_v7.1.7/flow_v0.151.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'glob'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'glob' {
  // import * as events from 'events';
  // import * as minimatch from 'minimatch';
  declare var G: typeof npm$namespace$G;

  declare var npm$namespace$G: {|
    (
      pattern: string,
      cb: (err: Error | null, matches: string[]) => void
    ): G$IGlob,
    (
      pattern: string,
      options: G$IOptions,
      cb: (err: Error | null, matches: string[]) => void
    ): G$IGlob,
    __promisify__: typeof G$__promisify__,
    sync: typeof G$sync,
    hasMagic: typeof G$hasMagic,
    glob: typeof G$glob,
    Glob: typeof G$Glob,
    GlobSync: typeof G$GlobSync,
    IOptions: Class<G$IOptions>,
    IGlobStatic: Class<G$IGlobStatic>,
    IGlobSyncStatic: Class<G$IGlobSyncStatic>,
    IGlobBase: Class<G$IGlobBase>,
    IGlob: Class<G$IGlob>
  |};
  declare function G$__promisify__(
    pattern: string,
    options?: G$IOptions
  ): Promise<string[]>;

  declare function G$sync(pattern: string, options?: G$IOptions): string[];

  declare function G$hasMagic(pattern: string, options?: G$IOptions): boolean;

  declare var G$glob: typeof G;

  declare var G$Glob: G$IGlobStatic;

  declare var G$GlobSync: G$IGlobSyncStatic;

  declare type G$IOptions = {
    cwd?: string,
    root?: string,
    dot?: boolean,
    nomount?: boolean,
    mark?: boolean,
    nosort?: boolean,
    stat?: boolean,
    silent?: boolean,
    strict?: boolean,
    cache?: {
      [path: string]: boolean | 'DIR' | 'FILE' | $ReadOnlyArray<string>,
      ...
    },
    statCache?: {
      [path: string]:
        | false
        | {
            isDirectory(): boolean,
            ...
          }
        | void,
      ...
    },
    symlinks?: {
      [path: string]: boolean | void,
      ...
    },
    realpathCache?: {
      [path: string]: string,
      ...
    },
    sync?: boolean,
    nounique?: boolean,
    nonull?: boolean,
    debug?: boolean,
    nobrace?: boolean,
    noglobstar?: boolean,
    noext?: boolean,
    nocase?: boolean,
    matchBase?: any,
    nodir?: boolean,
    ignore?: string | $ReadOnlyArray<string>,
    follow?: boolean,
    realpath?: boolean,
    nonegate?: boolean,
    nocomment?: boolean,
    absolute?: boolean,
    ...
  } & minimatch.IOptions;

  declare type G$IGlobStatic = {
    new(
      pattern: string,
      cb?: (err: Error | null, matches: string[]) => void
    ): G$IGlob,
    new(
      pattern: string,
      options: G$IOptions,
      cb?: (err: Error | null, matches: string[]) => void
    ): G$IGlob,
    prototype: G$IGlob,
    ...
  } & events.EventEmitter;

  declare interface G$IGlobSyncStatic {
    new(pattern: string, options?: G$IOptions): G$IGlobBase;
    prototype: G$IGlobBase;
  }

  declare interface G$IGlobBase {
    minimatch: minimatch.IMinimatch;
    options: G$IOptions;
    aborted: boolean;
    cache: {
      [path: string]: boolean | 'DIR' | 'FILE' | $ReadOnlyArray<string>,
      ...
    };
    statCache: {
      [path: string]:
        | false
        | {
            isDirectory(): boolean,
            ...
          }
        | void,
      ...
    };
    symlinks: {
      [path: string]: boolean | void,
      ...
    };
    realpathCache: {
      [path: string]: string,
      ...
    };
    found: string[];
  }

  declare type G$IGlob = {
    pause(): void,
    resume(): void,
    abort(): void,
    ...
  } & G$IGlobBase &
    events.EventEmitter;
  declare module.exports: typeof G;
}


/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'glob/common' {
  declare module.exports: any;
}

declare module 'glob/glob' {
  declare module.exports: any;
}

declare module 'glob/sync' {
  declare module.exports: any;
}

// Filename aliases
declare module 'glob/common.js' {
  declare module.exports: $Exports<'glob/common'>;
}
declare module 'glob/glob.js' {
  declare module.exports: $Exports<'glob/glob'>;
}
declare module 'glob/sync.js' {
  declare module.exports: $Exports<'glob/sync'>;
}
